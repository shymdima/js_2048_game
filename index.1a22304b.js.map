{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ areArraysEqual(arr1, arr2) {\n        if (arr1.length !== arr2.length) return false;\n        return arr1.every((value, index)=>value === arr2[index]);\n    }\n    createRandomNumbers(cell) {\n        const randomNumber = Math.floor(Math.random() * 11);\n        if (randomNumber <= 1) {\n            cell.textContent = \"4\";\n            cell.className = `field-cell cell-${cell.textContent}`;\n        } else {\n            cell.textContent = \"2\";\n            cell.className = `field-cell cell-${cell.textContent}`;\n        }\n    }\n    initiateGame() {\n        const cell = document.querySelectorAll(\".field-cell\");\n        const firstNumber = Math.floor(Math.random() * 16);\n        let secondNumber;\n        do secondNumber = Math.floor(Math.random() * 16);\n        while (secondNumber === firstNumber);\n        this.createRandomNumbers(cell[firstNumber]);\n        this.createRandomNumbers(cell[secondNumber]);\n    }\n    moveZerosToEnd(arr) {\n        let nonZeroElements = arr.filter((num)=>num !== 0);\n        for(let i = 1; i < nonZeroElements.length; i++)if (nonZeroElements[i] === nonZeroElements[i - 1]) {\n            nonZeroElements[i - 1] *= 2;\n            if (nonZeroElements[i - 1] === 2048) this.gameWin();\n            nonZeroElements[i] = 0;\n            this.getScore(nonZeroElements[i - 1]);\n            i--;\n        }\n        nonZeroElements = nonZeroElements.filter((num)=>num !== 0);\n        const zeroCount = arr.length - nonZeroElements.length;\n        return [\n            ...nonZeroElements,\n            ...Array(zeroCount).fill(0)\n        ];\n    }\n    moveZerosToStart(arr) {\n        let nonZeroElements = arr.filter((num)=>num !== 0);\n        for(let i = 1; i < nonZeroElements.length; i++)if (nonZeroElements[i] === nonZeroElements[i - 1]) {\n            nonZeroElements[i - 1] *= 2;\n            if (nonZeroElements[i - 1] === 2048) this.gameWin();\n            nonZeroElements[i] = 0;\n            this.getScore(nonZeroElements[i - 1]);\n            i--;\n        }\n        nonZeroElements = nonZeroElements.filter((num)=>num !== 0);\n        const zeroCount = arr.length - nonZeroElements.length;\n        return [\n            ...Array(zeroCount).fill(0),\n            ...nonZeroElements\n        ];\n    }\n    getScore(points) {\n        const scorecount = document.querySelector(\".game-score\");\n        let score = +scorecount.textContent;\n        score += points;\n        scorecount.textContent = score;\n    }\n    moveLeftEventListener(e) {\n        if (e.key === \"ArrowLeft\") {\n            const rows = document.querySelectorAll(\".field-row\");\n            const previousState = [\n                ...document.querySelectorAll(\".field-cell\")\n            ].map((cell)=>parseInt(cell.textContent) || 0);\n            rows.forEach((rowElement)=>{\n                const cells = [\n                    ...rowElement.querySelectorAll(\"td\")\n                ];\n                const cellValues = cells.map((cell)=>parseInt(cell.textContent) || 0);\n                const result = this.moveZerosToEnd(cellValues);\n                rowElement.innerHTML = \"\";\n                result.forEach((value, index)=>{\n                    const cell = cells[index];\n                    if (value === 0) {\n                        cell.textContent = \"\";\n                        cell.className = \"field-cell\";\n                    } else {\n                        cell.textContent = value;\n                        cell.className = `field-cell cell-${value}`;\n                    }\n                    rowElement.appendChild(cell);\n                });\n            });\n            const newState = [\n                ...document.querySelectorAll(\".field-cell\")\n            ].map((cell)=>parseInt(cell.textContent) || 0);\n            if (this.areArraysEqual(previousState, newState)) this.gameOver();\n            else this.addCell();\n        }\n    }\n    moveLeft() {\n        window.addEventListener(\"keydown\", this.boundMoveLeftListener);\n    }\n    moveRightEventListener(e) {\n        if (e.key === \"ArrowRight\") {\n            const rows = document.querySelectorAll(\".field-row\");\n            const previousState = [\n                ...document.querySelectorAll(\".field-cell\")\n            ].map((cell)=>parseInt(cell.textContent) || 0);\n            rows.forEach((rowElement)=>{\n                const cells = [\n                    ...rowElement.querySelectorAll(\"td\")\n                ];\n                const cellValues = cells.map((cell)=>parseInt(cell.textContent) || 0);\n                const result = this.moveZerosToStart(cellValues);\n                rowElement.innerHTML = \"\";\n                result.forEach((value, index)=>{\n                    const cell = cells[index];\n                    if (value === 0) {\n                        cell.textContent = \"\";\n                        cell.className = \"field-cell\";\n                    } else {\n                        cell.textContent = value;\n                        cell.className = `field-cell cell-${value}`;\n                    }\n                    rowElement.appendChild(cell);\n                });\n            });\n            const newState = [\n                ...document.querySelectorAll(\".field-cell\")\n            ].map((cell)=>parseInt(cell.textContent) || 0);\n            if (this.areArraysEqual(previousState, newState)) this.gameOver();\n            else this.addCell();\n        }\n    }\n    moveRight() {\n        window.addEventListener(\"keydown\", this.boundMoveRightListener);\n    }\n    moveUpEventListener(e) {\n        if (e.key === \"ArrowUp\") {\n            const rows = document.querySelectorAll(\".field-row\");\n            const columnNodes = [\n                [],\n                [],\n                [],\n                []\n            ];\n            const previousState = [\n                ...document.querySelectorAll(\".field-cell\")\n            ].map((cell)=>parseInt(cell.textContent) || 0);\n            rows.forEach((row)=>{\n                for(let i = 0; i < 4; i++){\n                    const cells = row.querySelector(`td:nth-child(${i + 1})`);\n                    if (cells) columnNodes[i].push(cells);\n                }\n            });\n            columnNodes.forEach((columnElement)=>{\n                const cellValues = columnElement.map((cell)=>parseInt(cell.textContent) || 0);\n                const result = this.moveZerosToEnd(cellValues);\n                result.forEach((value, index)=>{\n                    if (value === 0) {\n                        columnElement[index].textContent = \"\";\n                        columnElement[index].className = \"field-cell\";\n                    } else {\n                        columnElement[index].textContent = value;\n                        columnElement[index].className = `field-cell cell-${value}`;\n                    }\n                });\n            });\n            const newState = [\n                ...document.querySelectorAll(\".field-cell\")\n            ].map((cell)=>parseInt(cell.textContent) || 0);\n            if (this.areArraysEqual(previousState, newState)) this.gameOver();\n            else this.addCell();\n        }\n    }\n    moveUp() {\n        window.addEventListener(\"keydown\", this.boundMoveUpListener);\n    }\n    moveDownEventListener(e) {\n        if (e.key === \"ArrowDown\") {\n            const rows = document.querySelectorAll(\".field-row\");\n            const columnNodes = [\n                [],\n                [],\n                [],\n                []\n            ];\n            const previousState = [\n                ...document.querySelectorAll(\".field-cell\")\n            ].map((cell)=>parseInt(cell.textContent) || 0);\n            rows.forEach((row)=>{\n                for(let i = 0; i < 4; i++){\n                    const cells = row.querySelector(`td:nth-child(${i + 1})`);\n                    if (cells) columnNodes[i].push(cells);\n                }\n            });\n            columnNodes.forEach((columnElement)=>{\n                const cellValues = columnElement.map((cell)=>parseInt(cell.textContent) || 0);\n                const result = this.moveZerosToStart(cellValues);\n                result.forEach((value, index)=>{\n                    if (value === 0) {\n                        columnElement[index].textContent = \"\";\n                        columnElement[index].className = \"field-cell\";\n                    } else {\n                        columnElement[index].textContent = value;\n                        columnElement[index].className = `field-cell cell-${value}`;\n                    }\n                });\n            });\n            const newState = [\n                ...document.querySelectorAll(\".field-cell\")\n            ].map((cell)=>parseInt(cell.textContent) || 0);\n            if (this.areArraysEqual(previousState, newState)) this.gameOver();\n            else this.addCell();\n        }\n    }\n    moveDown() {\n        window.addEventListener(\"keydown\", this.boundMoveDownListener);\n    }\n    /**\n   * @returns {number}\n   */ /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {}\n    /**\n   * Starts the game.\n   */ startFunction() {\n        const startButton = document.querySelector(\".start\");\n        const startMessage = document.querySelector(\".message-start\");\n        if (startButton) {\n            startButton.textContent = \"Restart\";\n            startButton.classList.remove(\"start\");\n            startButton.classList.add(\"restart\");\n        } else return;\n        if (startMessage) startMessage.classList.add(\"hidden\");\n        else return;\n        this.boundMoveLeftListener = this.moveLeftEventListener.bind(this);\n        this.boundMoveRightListener = this.moveRightEventListener.bind(this);\n        this.boundMoveUpListener = this.moveUpEventListener.bind(this);\n        this.boundMoveDownListener = this.moveDownEventListener.bind(this);\n        this.moveLeft();\n        this.moveRight();\n        this.moveUp();\n        this.moveDown();\n        this.restart();\n        this.initiateGame();\n    }\n    start() {\n        const startButton = document.querySelector(\".start\");\n        if (!startButton) startButton.removeEventListener(\"click\", this.startFunction.bind(this));\n        else startButton.addEventListener(\"click\", this.startFunction.bind(this));\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        const restartButton = document.querySelector(\".restart\");\n        if (!restartButton) return;\n        restartButton.addEventListener(\"click\", ()=>{\n            const scorecount = document.querySelector(\".game-score\");\n            const cells = document.querySelectorAll(\".field-cell\");\n            const cellsArray = [\n                ...cells\n            ].map((cell)=>parseInt(cell.textContent) || 0);\n            const nonEmptyCells = cellsArray.filter((content)=>content !== 0);\n            if (nonEmptyCells.length === 2 && scorecount.textContent === \"0\") ;\n            else {\n                cells.forEach((cell)=>{\n                    cell.textContent = \"\";\n                    cell.className = \"field-cell\";\n                });\n                this.addCell();\n                this.addCell();\n                scorecount.textContent = 0;\n                const messageGameOver = document.querySelector(\".message-lose\");\n                const messageGameWin = document.querySelector(\".message-win\");\n                messageGameOver.classList.add(\"hidden\");\n                messageGameWin.classList.add(\"hidden\");\n            }\n        });\n    }\n    checkBeforeGameOver() {\n        const rows = document.querySelectorAll(\".field-row\");\n        const columnNodes = [\n            [],\n            [],\n            [],\n            []\n        ];\n        rows.forEach((row)=>{\n            for(let i = 0; i < 4; i++){\n                const cell = row.querySelector(`td:nth-child(${i + 1})`);\n                if (cell) columnNodes[i].push(cell);\n            }\n        });\n        for (const rowElement of rows){\n            const cells = [\n                ...rowElement.querySelectorAll(\"td\")\n            ];\n            const cellValues = cells.map((cell)=>parseInt(cell.textContent) || 0);\n            for(let i = 0; i < cellValues.length - 1; i++){\n                if (cellValues[i] === 0 || cellValues[i] === cellValues[i + 1]) return false;\n            }\n        }\n        for (const columnElement of columnNodes){\n            const cellValues = columnElement.map((cell)=>parseInt(cell.textContent) || 0);\n            for(let i = 0; i < cellValues.length - 1; i++){\n                if (cellValues[i] === 0 || cellValues[i] === cellValues[i + 1]) return false;\n            }\n        }\n        return true;\n    }\n    gameWin() {\n        const winMessage = document.querySelector(\".message-win\");\n        winMessage.classList.remove(\"hidden\");\n        window.removeEventListener(\"keydown\", this.boundMoveUpListener);\n        window.removeEventListener(\"keydown\", this.boundMoveDownListener);\n        window.removeEventListener(\"keydown\", this.boundMoveLeftListener);\n        window.removeEventListener(\"keydown\", this.boundMoveRightListener);\n    }\n    gameOver() {\n        if (this.checkBeforeGameOver()) {\n            const overMessage = document.querySelector(\".message-lose\");\n            overMessage.classList.remove(\"hidden\");\n            window.removeEventListener(\"keydown\", this.boundMoveUpListener);\n            window.removeEventListener(\"keydown\", this.boundMoveDownListener);\n            window.removeEventListener(\"keydown\", this.boundMoveLeftListener);\n            window.removeEventListener(\"keydown\", this.boundMoveRightListener);\n        }\n    }\n    addCell() {\n        const gameCells = document.querySelectorAll(\".field-cell\");\n        const emptyCells = [\n            ...gameCells\n        ].filter((cell)=>cell.textContent.length === 0);\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        this.createRandomNumbers(emptyCells[randomIndex]);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n$09e991522ca7e64e$var$game.start();\n$09e991522ca7e64e$var$game.restart(); // Write your code here\n\n\n//# sourceMappingURL=index.1a22304b.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngame.start();\ngame.restart();\n\n// Write your code here\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  areArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    return arr1.every((value, index) => value === arr2[index]);\n  }\n\n  createRandomNumbers(cell) {\n    const randomNumber = Math.floor(Math.random() * 11);\n\n    if (randomNumber <= 1) {\n      cell.textContent = '4';\n      cell.className = `field-cell cell-${cell.textContent}`;\n    } else {\n      cell.textContent = '2';\n      cell.className = `field-cell cell-${cell.textContent}`;\n    }\n  }\n\n  initiateGame() {\n    const cell = document.querySelectorAll('.field-cell');\n\n    const firstNumber = Math.floor(Math.random() * 16);\n    let secondNumber;\n\n    do {\n      secondNumber = Math.floor(Math.random() * 16);\n    } while (secondNumber === firstNumber);\n\n    this.createRandomNumbers(cell[firstNumber]);\n    this.createRandomNumbers(cell[secondNumber]);\n  }\n\n  moveZerosToEnd(arr) {\n    let nonZeroElements = arr.filter((num) => num !== 0);\n\n    for (let i = 1; i < nonZeroElements.length; i++) {\n      if (nonZeroElements[i] === nonZeroElements[i - 1]) {\n        nonZeroElements[i - 1] *= 2;\n\n        if (nonZeroElements[i - 1] === 2048) {\n          this.gameWin();\n        }\n\n        nonZeroElements[i] = 0;\n        this.getScore(nonZeroElements[i - 1]);\n        i--;\n      }\n    }\n\n    nonZeroElements = nonZeroElements.filter((num) => num !== 0);\n\n    const zeroCount = arr.length - nonZeroElements.length;\n\n    return [...nonZeroElements, ...Array(zeroCount).fill(0)];\n  }\n\n  moveZerosToStart(arr) {\n    let nonZeroElements = arr.filter((num) => num !== 0);\n\n    for (let i = 1; i < nonZeroElements.length; i++) {\n      if (nonZeroElements[i] === nonZeroElements[i - 1]) {\n        nonZeroElements[i - 1] *= 2;\n\n        if (nonZeroElements[i - 1] === 2048) {\n          this.gameWin();\n        }\n\n        nonZeroElements[i] = 0;\n        this.getScore(nonZeroElements[i - 1]);\n        i--;\n      }\n    }\n\n    nonZeroElements = nonZeroElements.filter((num) => num !== 0);\n\n    const zeroCount = arr.length - nonZeroElements.length;\n\n    return [...Array(zeroCount).fill(0), ...nonZeroElements];\n  }\n\n  getScore(points) {\n    const scorecount = document.querySelector('.game-score');\n\n    let score = +scorecount.textContent;\n\n    score += points;\n    scorecount.textContent = score;\n  }\n\n  moveLeftEventListener(e) {\n    if (e.key === 'ArrowLeft') {\n      const rows = document.querySelectorAll('.field-row');\n      const previousState = [...document.querySelectorAll('.field-cell')].map(\n        (cell) => parseInt(cell.textContent) || 0,\n      );\n\n      rows.forEach((rowElement) => {\n        const cells = [...rowElement.querySelectorAll('td')];\n        const cellValues = cells.map((cell) => parseInt(cell.textContent) || 0);\n\n        const result = this.moveZerosToEnd(cellValues);\n\n        rowElement.innerHTML = '';\n\n        result.forEach((value, index) => {\n          const cell = cells[index];\n\n          if (value === 0) {\n            cell.textContent = '';\n            cell.className = 'field-cell';\n          } else {\n            cell.textContent = value;\n            cell.className = `field-cell cell-${value}`;\n          }\n\n          rowElement.appendChild(cell);\n        });\n      });\n\n      const newState = [...document.querySelectorAll('.field-cell')].map(\n        (cell) => parseInt(cell.textContent) || 0,\n      );\n\n      if (this.areArraysEqual(previousState, newState)) {\n        this.gameOver();\n      } else {\n        this.addCell();\n      }\n    }\n  }\n\n  moveLeft() {\n    window.addEventListener('keydown', this.boundMoveLeftListener);\n  }\n\n  moveRightEventListener(e) {\n    if (e.key === 'ArrowRight') {\n      const rows = document.querySelectorAll('.field-row');\n      const previousState = [...document.querySelectorAll('.field-cell')].map(\n        (cell) => parseInt(cell.textContent) || 0,\n      );\n\n      rows.forEach((rowElement) => {\n        const cells = [...rowElement.querySelectorAll('td')];\n        const cellValues = cells.map((cell) => parseInt(cell.textContent) || 0);\n\n        const result = this.moveZerosToStart(cellValues);\n\n        rowElement.innerHTML = '';\n\n        result.forEach((value, index) => {\n          const cell = cells[index];\n\n          if (value === 0) {\n            cell.textContent = '';\n            cell.className = 'field-cell';\n          } else {\n            cell.textContent = value;\n            cell.className = `field-cell cell-${value}`;\n          }\n\n          rowElement.appendChild(cell);\n        });\n      });\n\n      const newState = [...document.querySelectorAll('.field-cell')].map(\n        (cell) => parseInt(cell.textContent) || 0,\n      );\n\n      if (this.areArraysEqual(previousState, newState)) {\n        this.gameOver();\n      } else {\n        this.addCell();\n      }\n    }\n  }\n\n  moveRight() {\n    window.addEventListener('keydown', this.boundMoveRightListener);\n  }\n\n  moveUpEventListener(e) {\n    if (e.key === 'ArrowUp') {\n      const rows = document.querySelectorAll('.field-row');\n      const columnNodes = [[], [], [], []];\n      const previousState = [...document.querySelectorAll('.field-cell')].map(\n        (cell) => parseInt(cell.textContent) || 0,\n      );\n\n      rows.forEach((row) => {\n        for (let i = 0; i < 4; i++) {\n          const cells = row.querySelector(`td:nth-child(${i + 1})`);\n\n          if (cells) {\n            columnNodes[i].push(cells);\n          }\n        }\n      });\n\n      columnNodes.forEach((columnElement) => {\n        const cellValues = columnElement.map(\n          (cell) => parseInt(cell.textContent) || 0,\n        );\n        const result = this.moveZerosToEnd(cellValues);\n\n        result.forEach((value, index) => {\n          if (value === 0) {\n            columnElement[index].textContent = '';\n            columnElement[index].className = 'field-cell';\n          } else {\n            columnElement[index].textContent = value;\n            columnElement[index].className = `field-cell cell-${value}`;\n          }\n        });\n      });\n\n      const newState = [...document.querySelectorAll('.field-cell')].map(\n        (cell) => parseInt(cell.textContent) || 0,\n      );\n\n      if (this.areArraysEqual(previousState, newState)) {\n        this.gameOver();\n      } else {\n        this.addCell();\n      }\n    }\n  }\n\n  moveUp() {\n    window.addEventListener('keydown', this.boundMoveUpListener);\n  }\n\n  moveDownEventListener(e) {\n    if (e.key === 'ArrowDown') {\n      const rows = document.querySelectorAll('.field-row');\n      const columnNodes = [[], [], [], []];\n      const previousState = [...document.querySelectorAll('.field-cell')].map(\n        (cell) => parseInt(cell.textContent) || 0,\n      );\n\n      rows.forEach((row) => {\n        for (let i = 0; i < 4; i++) {\n          const cells = row.querySelector(`td:nth-child(${i + 1})`);\n\n          if (cells) {\n            columnNodes[i].push(cells);\n          }\n        }\n      });\n\n      columnNodes.forEach((columnElement) => {\n        const cellValues = columnElement.map(\n          (cell) => parseInt(cell.textContent) || 0,\n        );\n        const result = this.moveZerosToStart(cellValues);\n\n        result.forEach((value, index) => {\n          if (value === 0) {\n            columnElement[index].textContent = '';\n            columnElement[index].className = 'field-cell';\n          } else {\n            columnElement[index].textContent = value;\n            columnElement[index].className = `field-cell cell-${value}`;\n          }\n        });\n      });\n\n      const newState = [...document.querySelectorAll('.field-cell')].map(\n        (cell) => parseInt(cell.textContent) || 0,\n      );\n\n      if (this.areArraysEqual(previousState, newState)) {\n        this.gameOver();\n      } else {\n        this.addCell();\n      }\n    }\n  }\n\n  moveDown() {\n    window.addEventListener('keydown', this.boundMoveDownListener);\n  }\n\n  /**\n   * @returns {number}\n   */\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {}\n\n  /**\n   * Starts the game.\n   */\n\n  startFunction() {\n    const startButton = document.querySelector('.start');\n    const startMessage = document.querySelector('.message-start');\n\n    if (startButton) {\n      startButton.textContent = 'Restart';\n      startButton.classList.remove('start');\n      startButton.classList.add('restart');\n    } else {\n      return;\n    }\n\n    if (startMessage) {\n      startMessage.classList.add('hidden');\n    } else {\n      return;\n    }\n\n    this.boundMoveLeftListener = this.moveLeftEventListener.bind(this);\n    this.boundMoveRightListener = this.moveRightEventListener.bind(this);\n    this.boundMoveUpListener = this.moveUpEventListener.bind(this);\n    this.boundMoveDownListener = this.moveDownEventListener.bind(this);\n\n    this.moveLeft();\n    this.moveRight();\n    this.moveUp();\n    this.moveDown();\n    this.restart();\n    this.initiateGame();\n  }\n\n  start() {\n    const startButton = document.querySelector('.start');\n\n    if (!startButton) {\n      startButton.removeEventListener('click', this.startFunction.bind(this));\n    } else {\n      startButton.addEventListener('click', this.startFunction.bind(this));\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const restartButton = document.querySelector('.restart');\n\n    if (!restartButton) {\n      return;\n    }\n\n    restartButton.addEventListener('click', () => {\n      const scorecount = document.querySelector('.game-score');\n      const cells = document.querySelectorAll('.field-cell');\n\n      const cellsArray = [...cells].map(\n        (cell) => parseInt(cell.textContent) || 0,\n      );\n      const nonEmptyCells = cellsArray.filter((content) => content !== 0);\n\n      if (nonEmptyCells.length === 2 && scorecount.textContent === '0') {\n      } else {\n        cells.forEach((cell) => {\n          cell.textContent = '';\n          cell.className = 'field-cell';\n        });\n\n        this.addCell();\n        this.addCell();\n\n        scorecount.textContent = 0;\n\n        const messageGameOver = document.querySelector('.message-lose');\n        const messageGameWin = document.querySelector('.message-win');\n\n        messageGameOver.classList.add('hidden');\n        messageGameWin.classList.add('hidden');\n      }\n    });\n  }\n\n  checkBeforeGameOver() {\n    const rows = document.querySelectorAll('.field-row');\n    const columnNodes = [[], [], [], []];\n\n    rows.forEach((row) => {\n      for (let i = 0; i < 4; i++) {\n        const cell = row.querySelector(`td:nth-child(${i + 1})`);\n\n        if (cell) {\n          columnNodes[i].push(cell);\n        }\n      }\n    });\n\n    for (const rowElement of rows) {\n      const cells = [...rowElement.querySelectorAll('td')];\n      const cellValues = cells.map((cell) => parseInt(cell.textContent) || 0);\n\n      for (let i = 0; i < cellValues.length - 1; i++) {\n        if (cellValues[i] === 0 || cellValues[i] === cellValues[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (const columnElement of columnNodes) {\n      const cellValues = columnElement.map(\n        (cell) => parseInt(cell.textContent) || 0,\n      );\n\n      for (let i = 0; i < cellValues.length - 1; i++) {\n        if (cellValues[i] === 0 || cellValues[i] === cellValues[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  gameWin() {\n    const winMessage = document.querySelector('.message-win');\n\n    winMessage.classList.remove('hidden');\n\n    window.removeEventListener('keydown', this.boundMoveUpListener);\n    window.removeEventListener('keydown', this.boundMoveDownListener);\n    window.removeEventListener('keydown', this.boundMoveLeftListener);\n    window.removeEventListener('keydown', this.boundMoveRightListener);\n  }\n  gameOver() {\n    if (this.checkBeforeGameOver()) {\n      const overMessage = document.querySelector('.message-lose');\n\n      overMessage.classList.remove('hidden');\n\n      window.removeEventListener('keydown', this.boundMoveUpListener);\n      window.removeEventListener('keydown', this.boundMoveDownListener);\n      window.removeEventListener('keydown', this.boundMoveLeftListener);\n      window.removeEventListener('keydown', this.boundMoveRightListener);\n    }\n  }\n\n  addCell() {\n    const gameCells = document.querySelectorAll('.field-cell');\n\n    const emptyCells = [...gameCells].filter(\n      (cell) => cell.textContent.length === 0,\n    );\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    this.createRandomNumbers(emptyCells[randomIndex]);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","areArraysEqual","arr1","arr2","length","every","value","index","createRandomNumbers","cell","randomNumber","Math","floor","random","textContent","className","initiateGame","secondNumber","document","querySelectorAll","firstNumber","moveZerosToEnd","arr","nonZeroElements","filter","num","i","gameWin","getScore","zeroCount","Array","fill","moveZerosToStart","points","scorecount","querySelector","score","moveLeftEventListener","e","key","rows","previousState","map","parseInt","forEach","rowElement","cells","cellValues","result","innerHTML","appendChild","newState","gameOver","addCell","moveLeft","window","addEventListener","boundMoveLeftListener","moveRightEventListener","moveRight","boundMoveRightListener","moveUpEventListener","columnNodes","row","push","columnElement","moveUp","boundMoveUpListener","moveDownEventListener","moveDown","boundMoveDownListener","getStatus","startFunction","startButton","startMessage","classList","remove","add","bind","restart","start","removeEventListener","restartButton","nonEmptyCells","cellsArray","content","messageGameOver","messageGameWin","checkBeforeGameOver","winMessage","overMessage","emptyCells","randomIndex"],"version":3,"file":"index.1a22304b.js.map"}